name: 'CI Tests'

on:
  push:
    branches:
    - 'investigation/*'

jobs:

################################################
########### Static Secrets Example #############
################################################
  static_secrets:
    runs-on: ubuntu-latest
    name: Fetch static secrets
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Fetch static secrets from AKeyless
      id: fetch-secrets
      uses: ./
      with:
        access-id: ${{ secrets.AKEYLESS_ACCESS_ID }}
        static-secrets: '{"/akeyless-action/ci/my-static-secret":"my_static_secret"}'

    - name: Verify Job Outputs
      run: echo "Your output secret is ${{ steps.fetch-secrets.outputs.my_static_secret }}"

    - name: Verify Environment Variables
      run: echo "Your environment secret is ${{ env.my_static_secret }}"


##########################################################
########## SQL Server Dynamic Secrets example ############
##########################################################

  # Option 1 - the default behavior gets the secret as a JSON string, it's the consumer's responsibility to parse it
  sql_dynamic_secrets:
    runs-on: ubuntu-latest
    name: SQL dynamic secrets (default)
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Fetch SQL Server dynamic secrets from Akleyless
      id: fetch-secrets
      uses: ./
      with:
        access-id: ${{ secrets.AKEYLESS_ACCESS_ID }}
        dynamic-secrets: '{"/akeyless-action/ci/az-sqlsrvsecret":"my_dynamic_secret"}'

    - name: Verify Job Outputs using jq
      run: |
        echo "Your job output secret is ${{ steps.fetch-secrets.outputs.my_dynamic_secret }}"
        echo "Manually parsed ID:" 
        echo '${{ steps.fetch-secrets.outputs.my_dynamic_secret }}' | jq '.id'
        echo "Manually parsed USER:" 
        echo '${{ steps.fetch-secrets.outputs.my_dynamic_secret }}' | jq '.user'
        echo "Manually parsed TTL_IN_MINUTES:" 
        echo '${{ steps.fetch-secrets.outputs.my_dynamic_secret }}' | jq '.ttl_in_minutes'
        echo "Manually parsed PASSWORD:"
        echo '${{ steps.fetch-secrets.outputs.my_dynamic_secret }}' | jq '.password'

    - name: Verify Environment Variables using jq
      run: |
        echo "Your environment secret is ${{ env.my_dynamic_secret }}"
        echo "Manually parsed ID:"
        echo '${{ env.my_dynamic_secret }}' | jq '.id'
        echo "Manually parsed USER:"
        echo '${{ env.my_dynamic_secret }}' | jq '.user'
        echo "Manually parsed TTL_IN_MINUTES:"
        echo '${{ env.my_dynamic_secret }}' | jq '.ttl_in_minutes'
        echo "Manually parsed PASSWORD:"
        echo '${{ env.my_dynamic_secret }}' | jq '.password'

    # Extra 1 & 2 Another way to get the secret values is to use jq and export them to custom env vars directly
    - name: EXTRA (part 1) - Export Secrets to Environment using jq
      run: |
        echo '${{ steps.fetch-secrets.outputs.my_dynamic_secret }}' | jq -r 'to_entries|map("AKEYLESS_\(.key)=\(.value|tostring)")|.[]' >> $GITHUB_ENV
    
    - name: EXTRA (part 2) - Verify EXTRA 1's Exported Variables
      run: |
        echo "AKEYLESS_id = ${{ env.AKEYLESS_id }}"
        echo "AKEYLESS_user = ${{ env.AKEYLESS_user }}"
        echo "AKEYLESS_password = ${{ env.AKEYLESS_password }}"
        echo "AKEYLESS_ttl_in_minutes = ${{ env.AKEYLESS_ttl_in_minutes }}"

  # Option 2 - Use 'parse-dynamic-secrets: true' to automatically parse the JSON string into individual outputs
  sql_dynamic_secrets_parsed:
    runs-on: ubuntu-latest
    name: SQL dynamic secrets (parsed)
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Fetch SQL Server dynamic secrets from Akleyless
      id: fetch-secrets
      uses: ./
      with:
        access-id: ${{ secrets.AKEYLESS_ACCESS_ID }}
        dynamic-secrets: '{"/akeyless-action/ci/az-sqlsrvsecret":""}' #no prefix, all output fields are dynamically parsed from source
        parse-dynamic-secrets: true

    - name: Verify Job Outputs (to known field names, pre-parsed)
      run: |
        echo "ID: ${{ steps.fetch-secrets.outputs.id }}" 
        echo "USER: ${{ steps.fetch-secrets.outputs.user }}" 
        echo "TTL_IN_MINUTES: ${{ steps.fetch-secrets.outputs.ttl_in_minutes }}" 
        echo "PASSWORD: ${{ steps.fetch-secrets.outputs.password }}"

    - name: Verify Environment Variables (to known field names, pre-parsed)
      run: |
        echo "ID: ${{ env.id }}"
        echo "USER: ${{ env.user }}"
        echo "TTL_IN_MINUTES: ${{ env.ttl_in_minutes }}"
        echo "PASSWORD: ${{ env.password }}"

  # Option 3 - This is the same as Option 2, but with a prefix
  sql_dynamic_secrets_prefixed:
    runs-on: ubuntu-latest
    name: SQL dynamic secrets (parsed with prefix)
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Fetch SQL Server dynamic secrets from Akleyless
      id: fetch-secrets
      uses: ./
      with:
        access-id: ${{ secrets.AKEYLESS_ACCESS_ID }}
        dynamic-secrets: '{"/akeyless-action/ci/az-sqlsrvsecret":"SQL"}' #applies "SQL_" prefix to dynamically parsed output names
        parse-dynamic-secrets: true

    - name: Verify Job Outputs (to known field names, pre-parsed with prefix)
      run: |
        echo "ID: ${{ steps.fetch-secrets.outputs.SQL_id }}" 
        echo "USER: ${{ steps.fetch-secrets.outputs.SQL_user }}" 
        echo "TTL_IN_MINUTES: ${{ steps.fetch-secrets.outputs.SQL_ttl_in_minutes }}" 
        echo "PASSWORD: ${{ steps.fetch-secrets.outputs.SQL_password }}"

    - name: Verify Environment Variables (to known field names, pre-parsed with prefix)
      run: |
        echo "ID: ${{ env.SQL_id }}"
        echo "USER: ${{ env.SQL_user }}"
        echo "TTL_IN_MINUTES: ${{ env.SQL_ttl_in_minutes }}"
        echo "PASSWORD: ${{ env.SQL_password }}"

##########################################################
########### GitHub Dynamic Secrets example #############
##########################################################

  # Option 1 - the default behavior gets the secret as a JSON string, it's the consumer's responsibility to parse it
  github_dynamic_secrets:
    runs-on: ubuntu-latest
    name: GitHub dynamic secrets (default)
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Fetch GitHub dynamic secrets from Akleyless
      id: fetch-secrets
      uses: ./
      with:
        access-id: ${{ secrets.AKEYLESS_ACCESS_ID }}
        dynamic-secrets: '{"/akeyless-action/ci/github-secrets":"github_dynamic_secret"}'

    - name: Verify Job Outputs using jq
      run: |
        echo "Your job output secret is ${{ steps.fetch-secrets.outputs.github_dynamic_secret }}"
        echo "Manually parsed ID:" 
        echo '${{ steps.fetch-secrets.outputs.github_dynamic_secret }}' | jq '.id'
        echo "Manually parsed TOKEN:" 
        echo '${{ steps.fetch-secrets.outputs.github_dynamic_secret }}' | jq '.token'
        echo "Manually parsed TTL_IN_MINUTES:" 
        echo '${{ steps.fetch-secrets.outputs.github_dynamic_secret }}' | jq '.ttl_in_minutes'

    - name: Verify Environment Variables using jq
      run: |
        echo "Your environment secret is ${{ env.github_dynamic_secret }}"
        echo "Manually parsed ID:"
        echo '${{ env.github_dynamic_secret }}' | jq '.id'
        echo "Manually parsed TOKEN:"
        echo '${{ env.github_dynamic_secret }}' | jq '.token'
        echo "Manually parsed TTL_IN_MINUTES:"
        echo '${{ env.github_dynamic_secret }}' | jq '.ttl_in_minutes'

    # Extra 1 & 2 Another way to get the secret values is to use jq and export them to custom env vars directly
    - name: EXTRA (part 1) - Export Secrets to Environment using jq
      run: |
        echo '${{ steps.fetch-secrets.outputs.github_dynamic_secret }}' | jq -r 'to_entries|map("AKEYLESS_GITHUB_\(.key)=\(.value|tostring)")|.[]' >> $GITHUB_ENV
    
    - name: EXTRA (part 2) - Verify EXTRA 1's Exported Variables
      run: |
        echo "id: ${{ env.AKEYLESS_GITHUB_id }}"
        echo "token: ${{ env.AKEYLESS_GITHUB_token }}"
        echo "ttl_in_minutes: ${{ env.AKEYLESS_GITHUB_ttl_in_minutes }}"

  # Option 2 - Use 'parse-dynamic-secrets: true' to automatically parse the JSON string into individual outputs
  github_dynamic_secrets_parsed:
    runs-on: ubuntu-latest
    name: GitHub dynamic secrets (parsed)
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Fetch GitHub dynamic secrets from Akleyless
      id: fetch-secrets
      uses: ./
      with:
        access-id: ${{ secrets.AKEYLESS_ACCESS_ID }}
        dynamic-secrets: '{"/akeyless-action/ci/github-secrets":""}' #no prefix, all output fields are dynamically parsed from source
        parse-dynamic-secrets: true

    - name: Verify Job Outputs (to known field names, pre-parsed)
      run: |
        echo "ID: ${{ steps.fetch-secrets.outputs.id }}" 
        echo "TOKEN: ${{ steps.fetch-secrets.outputs.token }}" 
        echo "TTL_IN_MINUTES: ${{ steps.fetch-secrets.outputs.ttl_in_minutes }}"

    - name: Verify Environment Variables (to known field names, pre-parsed)
      run: |
        echo "ID: ${{ env.id }}"
        echo "TOKEN: ${{ env.token }}"
        echo "TTL_IN_MINUTES: ${{ env.ttl_in_minutes }}"

  # Option 3 - This is the same as Option 2, but with a prefix
  github_dynamic_secrets_prefixed:
    runs-on: ubuntu-latest
    name: GitHub dynamic secrets (parsed with prefix)
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Fetch GitHub dynamic secrets from Akleyless
      id: fetch-secrets
      uses: ./
      with:
        access-id: ${{ secrets.AKEYLESS_ACCESS_ID }}
        dynamic-secrets: '{"/akeyless-action/ci/github-secrets":"GH"}' #applies "GH_" prefix to dynamically parsed output names
        parse-dynamic-secrets: true

    - name: Verify Job Outputs (to known field names, pre-parsed with prefix)
      run: |
        echo "ID: ${{ steps.fetch-secrets.outputs.GH_id }}" 
        echo "TOKEN: ${{ steps.fetch-secrets.outputs.GH_token }}" 
        echo "TTL_IN_MINUTES: ${{ steps.fetch-secrets.outputs.GH_ttl_in_minutes }}" 

    - name: Verify Environment Variables (to known field names, pre-parsed with prefix)
      run: |
        echo "ID: ${{ env.GH_id }}"
        echo "TOKEN: ${{ env.GH_token }}"
        echo "TTL_IN_MINUTES: ${{ env.GH_ttl_in_minutes }}"
